// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || amd64p32 || arm || arm64 || loong64 || mips64le || mips64p32le || mipsle || ppc64le || riscv64

package tc

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadTc_write returns the embedded CollectionSpec for tc_write.
func loadTc_write() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_Tc_writeBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load tc_write: %w", err)
	}

	return spec, err
}

// loadTc_writeObjects loads tc_write and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*tc_writeObjects
//	*tc_writePrograms
//	*tc_writeMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadTc_writeObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadTc_write()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// tc_writeSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type tc_writeSpecs struct {
	tc_writeProgramSpecs
	tc_writeMapSpecs
}

// tc_writeSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type tc_writeProgramSpecs struct {
	HandleTp *ebpf.ProgramSpec `ebpf:"handle_tp"`
}

// tc_writeMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type tc_writeMapSpecs struct {
}

// tc_writeObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadTc_writeObjects or ebpf.CollectionSpec.LoadAndAssign.
type tc_writeObjects struct {
	tc_writePrograms
	tc_writeMaps
}

func (o *tc_writeObjects) Close() error {
	return _Tc_writeClose(
		&o.tc_writePrograms,
		&o.tc_writeMaps,
	)
}

// tc_writeMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadTc_writeObjects or ebpf.CollectionSpec.LoadAndAssign.
type tc_writeMaps struct {
}

func (m *tc_writeMaps) Close() error {
	return _Tc_writeClose()
}

// tc_writePrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadTc_writeObjects or ebpf.CollectionSpec.LoadAndAssign.
type tc_writePrograms struct {
	HandleTp *ebpf.Program `ebpf:"handle_tp"`
}

func (p *tc_writePrograms) Close() error {
	return _Tc_writeClose(
		p.HandleTp,
	)
}

func _Tc_writeClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed tc_write_bpfel.o
var _Tc_writeBytes []byte
